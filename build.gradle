buildscript {

    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}
plugins {
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin
apply plugin: 'com.moowork.node'


group = 'com.example'
version = 'emeka'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}


dependencies {
    //remember that groovy is disbled
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation group: 'com.github.jmnarloch', name: 'modelmapper-spring-boot-starter', version: '1.0.1'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.springframework.amqp', name: 'spring-amqp', version: '2.2.0.RELEASE'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.7.0'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.12'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-parent', version: '2.1.5.RELEASE', ext: 'pom'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    compileOnly('org.projectlombok:lombok')
}

task copyWebApp(type: Copy) {
    from 'src/main/webapp/build'
    into 'build/resources/main/static/.'
}

task appNpmInstall(type: NpmTask) {
    description = "Installs all dependencies from package.json"
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["install"]
}

task appNpmBuild(type: NpmTask) {
    description = "Builds production version of the webapp"
    workingDir = file("${project.projectDir}/src/main/webapp")
    args = ["run", "build"]
}

//appNpmBuild.dependsOn appNpmInstall
//copyWebApp.dependsOn appNpmBuild
//compileJava.dependsOn copyWebApp